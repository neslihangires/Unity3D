using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerOnClick : MonoBehaviour
{
    public float maxSpeed = 5f;
    public float turnSpeed = 15f;

    private Animator anim;
    private CharacterController Controller;
    private CollisionFlags collisonFlags = CollisionFlags.None;

    private Vector3 playerMove = Vector3.zero;
    private Vector3 targetMovePoint = Vector3.zero;

    private float currentSpeed;
    private float playerToPointDistance;
    private float gravity = 9.8f;
    private float height;

    private bool canMove;
    private bool finishedMovement = true;
    private Vector3 NewMovepoint; // yeni gidecegimiz nokta

    private void Awake()
    {
        anim = GetComponent<Animator>();
        Controller = GetComponent<CharacterController>();
        currentSpeed = maxSpeed;
    }

    void Update()
    {
    //    MovePlayer();
    //    Controller.Move(playerMove);
    CalculateHeight();
    CheckIfFinishedMovment();
    }

    bool IsGrounded()
    {
        return collisonFlags == CollisionFlags.CollidedBelow ? true:false; //alttan bir obje degerse true
    }
    void CalculateHeight()
    {
        if (IsGrounded())
        {
            height=0f;
        }
        else
        {
            height -= gravity * Time.deltaTime;
        }
    }
    void CheckIfFinishedMovment()
    {
        if(!finishedMovement)
        {
            if(!anim.IsInTransition(0) && !anim.GetCurrentAnimatorStateInfo(0).IsName("Idle") && anim.GetCurrentAnimatorStateInfo(0).normalizedTime >= 0.8f)
            {
                finishedMovement = true;
            }
        }
        else
        {
            MovePlayer();
            playerMove.y = height * Time.deltaTime;
            collisonFlags = Controller.Move(playerMove);
        }
    }
    void MovePlayer()
    {
        if (Input.GetMouseButtonDown(1)) // input manager degerleri
        {
            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition); // kameradan mause pozisyonuna cizgi
            RaycastHit hit; // deger gondurur

            if(Physics.Raycast(ray, out hit)) // ray gider hit'i bilgi olarak geri getirir
            {
                playerToPointDistance = Vector3.Distance(transform.position, hit.point);
                if (hit.collider.gameObject.layer == LayerMask.NameToLayer("Ground"))
                {
                    if (playerToPointDistance >= 1.0f)
                    {
                        canMove = true;
                        targetMovePoint = hit.point;
                    }
                }
            }
        }
        if (canMove)
        {
            anim.SetFloat("Speed", 1.0f);

            NewMovepoint = new Vector3(targetMovePoint.x, transform.position.y, targetMovePoint.z);

            transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(NewMovepoint - transform.position), turnSpeed * Time.deltaTime);

            playerMove = transform.forward * currentSpeed * Time.deltaTime;

            if (Vector3.Distance(transform.position,NewMovepoint) <= 0.6f)
            {
                canMove = false;
            }
        }
        else
        {
            playerMove.Set(0f, 0f, 0f);
            anim.SetFloat("Speed", 0f);
        }
}

}
